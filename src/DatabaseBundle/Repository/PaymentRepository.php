<?php

namespace DatabaseBundle\Repository;

/**
 * PaymentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PaymentRepository extends \Doctrine\ORM\EntityRepository
{
    public function getPaymentsByPay($id)
    {
        $query = $this->createQueryBuilder('payment')
            ->join('payment.pay', 'pay')
            ->where('pay.id = :id')
            ->setParameter('id', $id)
            ->getQuery();
        return $query->getResult();
    }

    public function removePayment($payment)
    {
        $query = $this->createQueryBuilder('payment')
            ->join('payment.pay', 'pay')
            ->where('pay.id = :payId')
            ->andWhere('payment.id = :id')
            ->setParameter('payId', $payment->getPay())
            ->setParameter('id', $payment->getId())
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
        $em = $this->getEntityManager();
        if ($query != NULL) {
            $em->remove($query);
        }
        $em->flush();
    }

    public function getByPayment($payment)
    {
        $query = $this->createQueryBuilder('payment')
            ->join('payment.pay', 'pay')
            ->where('pay.id = :payId')
            ->andWhere('payment.amountPayed = :amount')
            ->andWhere('payment.paymentDate = :date')
            ->andWhere('payment.status = :status')
            ->andWhere('payment.active = :active')
            ->setParameter('payId', $payment->getPay())
            ->setParameter('amount', $payment->getAmountPayed())
            ->setParameter('date', $payment->getPaymentdate())
            ->setParameter('status', $payment->getStatus())
            ->setParameter('active', $payment->getActive())
            ->getQuery();
        return $query->getOneOrNullResult();
    }

    public function getPaymentsByHistory($phId)
    {
        $query = $this->createQueryBuilder('payment')
            ->join('payment.paymentHistory', 'history')
            ->where('history.id = :id')
            ->setParameter('id', $phId)
            ->getQuery();
        return $query->getResult();
    }

    public function getActivePaymentByHistory($phId)
    {
        $query = $this->createQueryBuilder('payment')
            ->join('payment.paymentHistory', 'history')
            ->where('history.id = :id')
            ->andWhere('payment.active = 1')
            ->setParameter('id', $phId)
            ->getQuery();
        return $query->getOneOrNullResult();
    }

    public function getActivePaymentsByPay($payId)
    {
        $query = $this->createQueryBuilder('payment')
            ->join('payment.pay', 'pay')
            ->where('pay.id = :id')
            ->andWhere('payment.active = 1')
            ->setParameter('id', $payId)
            ->getQuery();
        return $query->getResult();
    }
}
